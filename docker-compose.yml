version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: stock-portfolio-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache
  redis:
    image: redis:7-alpine
    container_name: stock-portfolio-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: stock-portfolio-user-service
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=${JWT_EXPIRY}
      - PORT=${USER_SERVICE_PORT}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Portfolio Service
  portfolio-service:
    build:
      context: ./portfolio-service
      dockerfile: Dockerfile
    container_name: stock-portfolio-portfolio-service
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - MVP_MODE=${MVP_MODE}
      - MARKET_DATA_SERVICE_URL=${MARKET_DATA_SERVICE_URL}
      - PORT=${PORTFOLIO_SERVICE_PORT}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Market Data Service
  market-data-service:
    build:
      context: ./market-data-service
      dockerfile: Dockerfile
    container_name: stock-portfolio-market-data-service
    environment:
      - REDIS_URL=${REDIS_URL}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - MVP_MODE=${MVP_MODE}
      - PORT=${MARKET_DATA_SERVICE_PORT}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dividend Service
  dividend-service:
    build:
      context: ./dividend-service
      dockerfile: Dockerfile
    container_name: stock-portfolio-dividend-service
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - MVP_MODE=${MVP_MODE}
      - MARKET_DATA_SERVICE_URL=${MARKET_DATA_SERVICE_URL}
      - PORT=${DIVIDEND_SERVICE_PORT}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      market-data-service:
        condition: service_healthy
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Reverse Proxy (Single Entry Point)
  nginx-proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile.proxy
    container_name: stock-portfolio-nginx-proxy
    ports:
      - "80:80"
      # Uncomment for HTTPS
      # - "443:443"
    volumes:
      - ./nginx/nginx-simple.conf:/etc/nginx/nginx.conf
      # Uncomment for SSL certificates
      # - ./ssl:/etc/nginx/ssl
    depends_on:
      user-service:
        condition: service_healthy
      portfolio-service:
        condition: service_healthy
      market-data-service:
        condition: service_healthy
      dividend-service:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock-portfolio-frontend
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_API_URL=/api
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  stock-network:
    driver: bridge